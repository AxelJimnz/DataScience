library(ggplot2)
library(dplyr)
library(reshape2)
install.packages("dplyr")
library(ggplot2)
library(dplyr)
library(reshape2)
library(ggplot2)
library(dplyr)
library(reshape2)
data <- read.csv("Salary_Data.csv")
View(data)
str(data)
is.na(data)
# Limpiar los datos (rellenar los valores faltantes con la mediana o la moda)
data$Gender[is.na(data$Gender)] <- as.character(names(sort(table(data$Gender), decreasing = TRUE))[1])
data$Education.Level[is.na(data$Education.Level)] <- as.character(names(sort(table(data$Education.Level), decreasing = TRUE))[1])
data$Job.Title[is.na(data$Job.Title)] <- as.character(names(sort(table(data$Job.Title), decreasing = TRUE))[1])
data$Age[is.na(data$Age)] <- median(data$Age, na.rm = TRUE)
data$Years.of.Experience[is.na(data$Years.of.Experience)] <- median(data$Years.of.Experience, na.rm = TRUE)
# Eliminar filas con salario faltante
data <- data[!is.na(data$Salary),]
# Convertir variables categóricas a factores
data$Gender <- as.factor(data$Gender)
data$Education.Level <- as.factor(data$Education.Level)
data$Job.Title <- as.factor(data$Job.Title)
View(data)
# Cargar librerías necesarias
install.packages("dplyr")
install.packages("dplyr")
str(data)
# Visualización inicial de la correlación entre Años de experiencia y Salario
ggplot(data, aes(x = Years.of.Experience, y = Salary)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", col = "blue") + # Línea de regresión
theme_minimal() +
ggtitle("Salary vs. Years of Experience")
# Visualización inicial de la correlación entre Años de experiencia y Salario
ggplot(data, aes(x = Years.of.Experience, y = Salary)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", col = "blue") + # Línea de regresión
theme_minimal() +
ggtitle("Salary vs. Years of Experience")
ggplot(data, aes(x = Education.Level, y = Salary)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
theme_minimal() +
ggtitle("Salary vs. Education Level") +
labs(x = "Education Level", y = "Salary") +
theme(plot.title = element_text(hjust = 0.5))
# Visualización inicial de la correlación entre Años de experiencia y Salario
ggplot(data, aes(x = Years.of.Experience, y = Salary)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", col = "blue") + # Línea de regresión
theme_minimal() +
ggtitle("Salary vs. Years of Experience")
# Modelo de Regresión Lineal Múltiple
# Usamos Years of Experience, Education Level, Gender, Age, y Job Title como predictores
model <- lm(Salary ~ Years.of.Experience + Education.Level + Gender + Age + Job.Title, data = data)
summary(model)
View(model)
library(ggplot2)
library(dplyr)
library(caret)
library(psych)
data <- read.csv("Salary_Data.csv")
# Cargar librerías necesarias
install.packages("dplyr")
str(data)
# Eliminar filas con salario faltante
data <- data[!is.na(data$Salary),]
View(data)
data <- data[!is.na(data$Salary),]
# Convertir variables categóricas a factores
data$Gender <- as.factor(data$Gender)
data$Education.Level <- as.factor(data$Education.Level)
data$Job.Title <- as.factor(data$Job.Title)
# 1.3 Distribución del Salario por Nivel Educativo
ggplot(data, aes(x = Education.Level, y = Salary, fill = Education.Level)) +
geom_boxplot() +
theme_minimal() +
ggtitle("Distribución de Salario por Nivel Educativo") +
labs(x = "Nivel Educativo", y = "Salario") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data, aes(x = Salary)) +
geom_histogram(binwidth = 5000, fill = "blue", color = "white", alpha = 0.7) +
theme_minimal() +
ggtitle("Distribución de los Salarios") +
labs(x = "Salario", y = "Frecuencia")
# Convertir variables categóricas a factores
data$Gender <- as.factor(data$Gender)
ggplot(data, aes(x = Years.of.Experience, y = Salary)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", color = "red") +
theme_minimal() +
ggtitle("Relación entre Años de Experiencia y Salario") +
labs(x = "Años de Experiencia", y = "Salario")
set.seed(123)  # Fijar una semilla para la reproducibilidad
trainIndex <- createDataPartition(data$Salary, p = 0.7, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
View(test_data)
View(train_data)
View(train_data)
numeric_data_train <- train_data %>% select(Age, Years.of.Experience)
numeric_data_train_scaled <- scale(numeric_data_train)
categorical_data_train <- train_data %>% select(Gender, Education.Level, Job.Title)
categorical_data_train_dummies <- model.matrix(~ Gender + Education.Level + Job.Title, data = train_data)[, -1]
categorical_data_train <- train_data %>% select(Gender, Education.Level, Job.Title)
categorical_data_train_dummies <- model.matrix(~ Gender + Education.Level + Job.Title, data = train_data)[, -1]
train_pca_ready <- cbind(numeric_data_train_scaled, categorical_data_train_dummies)
# Aplicar PCA al conjunto de entrenamiento
pca_result_train <- prcomp(train_pca_ready, center = TRUE, scale. = TRUE)
categorical_data_train <- train_data %>% select(Gender, Education.Level, Job.Title)
categorical_data_train_dummies <- model.matrix(~ Gender + Education.Level + Job.Title, data = train_data)[, -1]
train_pca_ready <- cbind(numeric_data_train_scaled, categorical_data_train_dummies)
train_pca_ready <- cbind(numeric_data_train_scaled, categorical_data_train_dummies)
pca_result_train <- prcomp(train_pca_ready, center = TRUE, scale. = TRUE)
library(ggplot2)
library(dplyr)
library(caret)
library(psych)
View(categorical_data_train)
data <- read.csv("Salary_Data.csv")
data <- read.csv("Salary_Data.csv")
str(data)
data <- data[!is.na(data$Salary),]
data$Gender <- as.factor(data$Gender)
data$Education.Level <- as.factor(data$Education.Level)
data$Job.Title <- as.factor(data$Job.Title)
ggplot(data, aes(x = Salary)) +
geom_histogram(binwidth = 5000, fill = "blue", color = "white", alpha = 0.7) +
theme_minimal() +
ggtitle("Distribución de los Salarios") +
labs(x = "Salario", y = "Frecuencia")
ggplot(data, aes(x = Education.Level, y = Salary, fill = Education.Level)) +
geom_boxplot() +
theme_minimal() +
ggtitle("Distribución de Salario por Nivel Educativo") +
labs(x = "Nivel Educativo", y = "Salario") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data, aes(x = Years.of.Experience, y = Salary)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", color = "red") +
theme_minimal() +
ggtitle("Relación entre Años de Experiencia y Salario") +
labs(x = "Años de Experiencia", y = "Salario")
ggplot(data, aes(x = Education.Level, fill = Education.Level)) +
geom_bar() +
theme_minimal() +
ggtitle("Distribución del Nivel Educativo") +
labs(x = "Nivel Educativo", y = "Conteo") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data, aes(x = Job.Title, fill = Job.Title)) +
geom_bar() +
theme_minimal() +
ggtitle("Distribución de los Títulos del Trabajo") +
labs(x = "Título del Trabajo", y = "Conteo") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data, aes(x = Age, y = Salary)) +
geom_point(alpha = 0.6, color = "purple") +
geom_smooth(method = "lm", color = "green") +
theme_minimal() +
ggtitle("Relación entre Edad y Salario") +
labs(x = "Edad", y = "Salario")
set.seed(123)  # Fijar una semilla para la reproducibilidad
trainIndex <- createDataPartition(data$Salary, p = 0.7, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
set.seed(123)  # Fijar una semilla para la reproducibilidad
trainIndex <- createDataPartition(data$Salary, p = 0.7, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
numeric_data_train <- train_data %>% select(Age, Years.of.Experience)
numeric_data_train_scaled <- scale(numeric_data_train)
categorical_data_train <- train_data %>% select(Gender, Education.Level, Job.Title)
categorical_data_train_dummies <- model.matrix(~ Gender + Education.Level + Job.Title, data = train_data)[, -1]
train_pca_ready <- cbind(numeric_data_train_scaled, categorical_data_train_dummies)
train_pca_ready <- train_pca_ready[, apply(train_pca_ready, 2, var) != 0]
pca_result_train <- prcomp(train_pca_ready, center = TRUE, scale. = TRUE)
summary(pca_result_train)
library(ggplot2)
library(dplyr)
library(caret)
library(psych)
data <- read.csv("Salary_Data.csv")
str(data)
data <- data[!is.na(data$Salary),]
data$Education.Level <- as.factor(data$Education.Level)
data$Job.Title <- as.factor(data$Job.Title)
# -------------------------------
# Exploratory Data Analysis (EDA)
# -------------------------------
# Distribución de la variable Salary
ggplot(data, aes(x = Salary)) +
geom_histogram(binwidth = 5000, fill = "blue", color = "white", alpha = 0.7) +
theme_minimal() +
ggtitle("Distribución de los Salarios") +
labs(x = "Salario", y = "Frecuencia")
ggplot(data, aes(x = Education.Level, y = Salary, fill = Education.Level)) +
geom_boxplot() +
theme_minimal() +
ggtitle("Distribución de Salario por Nivel Educativo") +
labs(x = "Nivel Educativo", y = "Salario") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Relación entre Años de Experiencia y Salario
ggplot(data, aes(x = Years.of.Experience, y = Salary)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", color = "red") +
theme_minimal() +
ggtitle("Relación entre Años de Experiencia y Salario") +
labs(x = "Años de Experiencia", y = "Salario")
# Relación entre Años de Experiencia y Salario
ggplot(data, aes(x = Years.of.Experience, y = Salary)) +
geom_point(alpha = 0.6, color = "blue") +
geom_smooth(method = "lm", color = "red") +
theme_minimal() +
ggtitle("Relación entre Años de Experiencia y Salario") +
labs(x = "Años de Experiencia", y = "Salario")
ggplot(data, aes(x = as.factor(Years.of.Experience), y = Salary)) +
geom_boxplot(fill = "lightblue", color = "darkblue", outlier.colour = "red") +
theme_minimal() +
ggtitle("Relación entre Años de Experiencia y Salario (Boxplot)") +
labs(x = "Años de Experiencia", y = "Salario") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
set.seed(123)  # Fijar una semilla para la reproducibilidad
trainIndex <- createDataPartition(data$Salary, p = 0.7, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
numeric_data_train <- train_data %>% select(Age, Years.of.Experience)
numeric_data_train_scaled <- scale(numeric_data_train)
categorical_data_train <- train_data %>% select(Education.Level, Job.Title)
categorical_data_train_dummies <- model.matrix(~ Education.Level + Job.Title, data = train_data)[, -1]
# Unir las variables numéricas escaladas con las categóricas dummies en el conjunto de entrenamiento
train_pca_ready <- cbind(numeric_data_train_scaled, categorical_data_train_dummies)
# Eliminar columnas constantes
train_pca_ready <- train_pca_ready[, apply(train_pca_ready, 2, var) != 0]
pca_result_train <- prcomp(train_pca_ready, center = TRUE, scale. = TRUE)
View(pca_result_train)
components_train <- pca_result_train$x[, 1:2]
View(components_train)
pca_model_train <- lm(Salary ~ components_train, data = cbind(train_data, components_train))
summary(pca_model_train)
numeric_data_test <- test_data %>% select(Age, Years.of.Experience)
numeric_data_test_scaled <- scale(numeric_data_test, center = attr(numeric_data_train_scaled, "scaled:center"), scale = attr(numeric_data_train_scaled, "scaled:scale"))
categorical_data_test <- test_data %>% select(Education.Level, Job.Title)
categorical_data_test_dummies <- model.matrix(~ Education.Level + Job.Title, data = test_data)[, -1]
test_pca_ready <- cbind(numeric_data_test_scaled, categorical_data_test_dummies)
test_pca_ready <- test_pca_ready[, apply(test_pca_ready, 2, var) != 0]
pca_components_test <- predict(pca_result_train, newdata = test_pca_ready)[, 1:2]
numeric_data_test <- test_data %>% select(Age, Years.of.Experience)
numeric_data_test_scaled <- scale(numeric_data_test, center = attr(numeric_data_train_scaled, "scaled:center"), scale = attr(numeric_data_train_scaled, "scaled:scale"))
categorical_data_test_dummies <- predict(dummies_model, newdata = test_data)
set.seed(123)  # Fijar una semilla para la reproducibilidad
trainIndex <- createDataPartition(data$Salary, p = 0.7, list = FALSE)
train_data <- data[trainIndex, ]
test_data <- data[-trainIndex, ]
dummies_model <- dummyVars(Salary ~ Education.Level + Job.Title, data = train_data)
categorical_data_train_dummies <- predict(dummies_model, newdata = train_data)
train_data_combined <- cbind(train_data %>% select(Age, Years.of.Experience), categorical_data_train_dummies)
train_data_combined_scaled <- scale(train_data_combined)
train_data_combined_scaled <- train_data_combined_scaled[, apply(train_data_combined_scaled, 2, var) != 0]
pca_result_train <- prcomp(train_data_combined_scaled, center = TRUE, scale. = TRUE)
